{"version":3,"sources":["MinimizableWebChat.js","App.js","index.js","GP.PNG"],"names":["MinimizableWebChat","App","className","alt","src","WebPageBackground","ReactDOM","render","document","getElementById","module","exports"],"mappings":"8cA0KeA,I,kBC7JAC,G,QAPH,kBACV,yBAAKC,UAAU,OACb,yBAAKC,IAAI,qBAAqBC,IAAKC,SCHvCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U,gFCLjDC,EAAOC,QAAU,IAA0B,gC","file":"static/js/main.e6f10531.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { createStore, createStyleSet } from 'botframework-webchat';\n\nimport WebChat from './WebChat';\n\nimport './fabric-icons-inline.css';\nimport './MinimizableWebChat.css';\n\n\n\nconst MinimizableWebChat = () => {\n  const store = useMemo(\n    () =>\n      createStore({}, ({ dispatch }) => next => action => {\n        if (action.type === 'DIRECT_LINE/CONNECT_FULFILLED' && localStorage.getItem(\"welcome\") === \"true\") {\n          dispatch({\n            type: 'WEB_CHAT/SEND_EVENT',\n            payload: {\n              name: 'webchat/join',\n              value: {\n                language: window.navigator.language\n              }\n            }\n          });\n        } else if(action.type === 'DIRECT_LINE/CONNECT_FULFILLED' && localStorage.getItem(\"welcome\") === \"false\"){\n          dispatch({\n            type: 'WEB_CHAT/SEND_EVENT',\n            payload: {\n              name: 'requestWelcomeDialog',\n              value: {\n                language: window.navigator.language\n              }\n            }\n          });\n        }else if (action.type === 'DIRECT_LINE/INCOMING_ACTIVITY') {\n          if (action.payload.activity.from.role === 'bot') {\n            setNewMessage(true);\n          }\n        }\n        return next(action);\n      }),\n    []\n  );\n\n  const styleSet = useMemo(\n    () =>\n      createStyleSet({\n        backgroundColor: 'Transparent'\n      }),\n    []\n  );\n\n  const [loaded, setLoaded] = useState(false);\n  const [minimized, setMinimized] = useState(true);\n  const [newMessage, setNewMessage] = useState(false);\n  const [side, setSide] = useState('right');\n  const [token, setToken] = useState();\n\n  // To learn about reconnecting to a conversation, see the following documentation:\n  // https://docs.microsoft.com/en-us/azure/bot-service/rest-api/bot-framework-rest-direct-line-3-0-reconnect-to-conversation?view=azure-bot-service-4.0\n\n  const handleFetchToken = useCallback(async () => {\n    if (!token) {\n      \n      const res = await fetch('https://directline.botframework.com/v3/directline/conversations', { \n        method: 'POST',\n        headers: new Headers({\n          'Authorization': 'Bearer ' + '9wQKNaIAVQM.nQ1u_X8GS3Eh4Bg9AVUlpxrOVFKy-Gl9Q2IZnNBVoyQ', \n          'Content-Type': '\"Content-Type\", \"application/json\"'\n        })\n      });\n      const { token } = await res.json();\n\n      console.log(res)\n      localStorage.setItem(\"token\",token);\n      localStorage.setItem(\"welcome\",false);\n      setToken(token);\n    }\n  }, [setToken, token]);\n\n  const handleMaximizeButtonClick = useCallback(async () => {\n    setLoaded(true);\n    setMinimized(false);\n    setNewMessage(false);\n  }, [setMinimized, setNewMessage]);\n\n  const handleMinimizeButtonClick = useCallback(() => {\n    setMinimized(true);\n    setNewMessage(false);\n  }, [setMinimized, setNewMessage]);\n\n  const handleSwitchButtonClick = useCallback(() => {\n    setSide(side === 'left' ? 'right' : 'left');\n  }, [setSide, side]);\n  const handleLanguageButtonClick = useCallback (()=>{\n    setNewMessage(true)\n  })\n\n  // TODO: [P2] Currently, we cannot unmount Web Chat from DOM when it is minimized.\n  //       Today, if we unmount it, Web Chat will call disconnect on DirectLineJS object.\n  //       When minimized, we still want to maintain that connection while the UI is gone.\n  //       This is related to https://github.com/microsoft/BotFramework-WebChat/issues/2750.\n\n  return (\n    <div className=\"minimizable-web-chat\">\n      {minimized && (\n        <button className=\"maximize\" onClick={handleMaximizeButtonClick}>\n          <span className={token ? 'ms-Icon ms-Icon--MessageFill' : 'ms-Icon ms-Icon--Message'} />\n          {newMessage && <span className=\"ms-Icon ms-Icon--CircleShapeSolid red-dot\" />}\n        </button>\n      )}\n      {loaded && (\n        <div className={classNames(side === 'left' ? 'chat-box left' : 'chat-box right', minimized ? 'hide' : '')}>\n          <header>\n            <div className=\"filler\" />\n            <button className=\"switch\" onClick={handleSwitchButtonClick}>\n              <span className=\"ms-Icon ms-Icon--Switch\" />\n            </button>\n            <button className=\"minimize\" onClick={handleMinimizeButtonClick}>\n              <span className=\"ms-Icon ms-Icon--ChromeMinimize\" />\n            </button>\n          </header>\n          <WebChat\n            className=\"react-web-chat\"\n            onFetchToken={handleFetchToken}\n            store={store}\n            styleSet={styleSet}\n            token={token}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\n// function displayAnimation(){\n//   var imgName = Math.floor(Math.random()*4) + 1;\n\n//   // setTimeout(function(){\n//       $('.css-dhu3ty.css-7c9av6')\n//           .append($('<li id=\"animation-item\" class=\"css-1qyo5rb\">'\n//                       + '<div class=\"css-hgucfj css-1wi3416\">'    //1\n//                           + '<div class=\"css-7xorrq avatar\">Bot</div>' \n//                           + '<div class=\"content\">' //2\n//                               + '<div class=\"row message\">' //3\n//                                   + '<div class=\"css-ostbv8 bubble\">' //4\n//                                       + '<div class=\"markdown css-o3xlyv\"><p>' //5\n//                                           + '<img src=\"' + ROOT_FOLDER + 'img/anim/' + imgName + '.png\" class=\"animation-image\" />'\n//                                       + '</p></div>' //5\n//                                   + '</div>' //4\n//                                   + '<div class=\"filler\"></div>' \n//                               + '</div>' //3\n//                               + '<div class=\"row\">' \n//                                   + '<span class=\"css-1phiexw\">'\n//                                   // + 'Just now'\n//                                   + '</span>' \n//                                   + '<div class=\"filler\"></div>' \n//                               + '</div>' \n//                           + '</div>' //2\n//                           + '<div class=\"filler\"></div>' \n//                       + '</div>' //1\n//                   + '</li>').hide().fadeIn(2000));\n\n//       $('#animation-item').delay(10000).fadeOut(2000);\n//   // }, 1000);\n// }\nfunction generateUserId(){\n  return /*\"dl_\" +*/ Date.now().toString() + (Math.floor(Math.random() * 1000000) + 1).toString();\n}\nexport default MinimizableWebChat;\n","import React from 'react';\n\nimport MinimizableWebChat from './MinimizableWebChat';\nimport WebPageBackground from './GP.PNG';\nimport './App.css';\n\nconst App = () => (\n  <div className=\"App\">\n    <img alt=\"product background\" src={WebPageBackground} />\n    {/* <MinimizableWebChat /> */}\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n","module.exports = __webpack_public_path__ + \"static/media/GP.ba4df533.PNG\";"],"sourceRoot":""}