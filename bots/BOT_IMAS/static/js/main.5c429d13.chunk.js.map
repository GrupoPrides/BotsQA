{"version":3,"sources":["WebChat.js","MinimizableWebChat.js","App.js","index.js","bg.PNG"],"names":["WebChat","className","onFetchToken","store","token","directLine","useMemo","createDirectLine","styleSet","createStyleSet","backgroundColor","botAvatarImage","userAvatarImage","useEffect","MinimizableWebChat","createStore","dispatch","next","action","type","localStorage","getItem","payload","name","value","language","window","navigator","activity","from","role","setNewMessage","useState","loaded","setLoaded","minimized","setMinimized","newMessage","side","setSide","setToken","handleFetchToken","useCallback","a","async","fetch","method","headers","Headers","res","json","console","log","setItem","handleMaximizeButtonClick","handleMinimizeButtonClick","handleSwitchButtonClick","onClick","classNames","styleOptions","App","alt","src","WebPageBackground","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.5c429d13.chunk.js","sourcesContent":["import React, { useEffect, useMemo } from 'react';\nimport ReactWebChat, { createDirectLine, createStyleSet } from 'botframework-webchat';\n\nimport './WebChat.css';\n\nconst WebChat = ({ className, onFetchToken, store, token }) => {\n  const directLine = useMemo(() => createDirectLine({ token }), [token]);\n\n  const styleSet = useMemo(\n    () =>\n      createStyleSet({\n        backgroundColor: 'Transparent',\n        /*bubbleBackground: '#222',\n        bubbleBorder: 'solid 1px #444',\n        bubbleBorderRadius: 20,\n        bubbleFromUserBackground: '#222',\n        bubbleFromUserBorder: 'solid 1px #444',\n        bubbleFromUserBorderRadius: 20,\n        bubbleFromUserTextColor: 'White',\n        bubbleTextColor: 'White',*/        \n          //botAvatarImage: 'https://avatars1.githubusercontent.com/u/1622400?s=64&v=4',\n          botAvatarImage: 'https://gpbot.azureedge.net/botimas/webchat/img/avatar.png',\n          //botAvatarInitials: 'BF',\n          //userAvatarImage: 'https://docs.microsoft.com/en-us/azure/bot-service/v4sdk/media/logo_bot.svg?view=azure-bot-service-4.0',\n          userAvatarImage: 'https://cdn3.iconfinder.com/data/icons/vector-icons-6/96/256-512.png',\n          //userAvatarInitials: 'WC'\n      }),\n    []\n  );\n\n  useEffect(() => {\n    onFetchToken();\n  }, [onFetchToken]);\n\n  return token ? (\n    <ReactWebChat className={`${className || ''} web-chat`} directLine={directLine} store={store} styleSet={styleSet} />\n  ) : (\n    <div className={`${className || ''} connect-spinner`}>\n      <div className=\"content\">\n        <div className=\"icon\">\n          <span className=\"ms-Icon ms-Icon--Robot\" />\n        </div>\n        <p>Please wait while we are connecting.</p>\n      </div>\n    </div>\n  );\n};\n\nexport default WebChat;\n","import classNames from 'classnames';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { createStore, createStyleSet } from 'botframework-webchat';\n\nimport WebChat from './WebChat';\n\nimport './fabric-icons-inline.css';\nimport './MinimizableWebChat.css';\n\n\n\nconst MinimizableWebChat = () => {\n  const store = useMemo(\n    () =>\n      createStore({}, ({ dispatch }) => next => action => {\n        if (action.type === 'DIRECT_LINE/CONNECT_FULFILLED' && localStorage.getItem(\"welcome\") === \"true\") {\n          dispatch({\n            type: 'WEB_CHAT/SEND_EVENT',\n            payload: {\n              name: 'webchat/join',\n              value: {\n                language: window.navigator.language\n              }\n            }\n          });\n        } else if(action.type === 'DIRECT_LINE/CONNECT_FULFILLED' && localStorage.getItem(\"welcome\") === \"false\"){\n          dispatch({\n            type: 'WEB_CHAT/SEND_EVENT',\n            payload: {\n              name: 'requestWelcomeDialog',\n              value: {\n                language: window.navigator.language\n              }\n            }\n          });\n        }else if (action.type === 'DIRECT_LINE/INCOMING_ACTIVITY') {\n          if (action.payload.activity.from.role === 'bot') {\n            setNewMessage(true);\n          }\n        }\n        return next(action);\n      }),\n    []\n  );\n\n  const styleOptions = {\n   /* bubbleBackground: '#222',\n  bubbleBorder: 'solid 1px #444',\n  bubbleBorderRadius: 20,\n  bubbleFromUserBackground: '#222',\n  bubbleFromUserBorder: 'solid 1px #444',\n  bubbleFromUserBorderRadius: 20,\n  bubbleFromUserTextColor: 'White',\n  bubbleTextColor: 'White',\n    botAvatarImage:\n      './avatar.png',\n    botAvatarInitials: 'BF',\n    userAvatarImage: 'https://docs.microsoft.com/en-us/azure/bot-service/v4sdk/media/logo_bot.svg?view=azure-bot-service-4.0',\n    userAvatarInitials: 'WC'*/\n  };\n\n  const styleSet = useMemo(\n    () =>\n      createStyleSet({\n        backgroundColor: 'Transparent'\n      }),\n    []\n  );\n\n  const [loaded, setLoaded] = useState(false);\n  const [minimized, setMinimized] = useState(true);\n  const [newMessage, setNewMessage] = useState(false);\n  const [side, setSide] = useState('right');\n  const [token, setToken] = useState();\n\n  // To learn about reconnecting to a conversation, see the following documentation:\n  // https://docs.microsoft.com/en-us/azure/bot-service/rest-api/bot-framework-rest-direct-line-3-0-reconnect-to-conversation?view=azure-bot-service-4.0\n\n  const handleFetchToken = useCallback(async () => {\n    if (!token) {\n      \n      const res = await fetch('https://directline.botframework.com/v3/directline/conversations', { \n        method: 'POST',\n        headers: new Headers({\n          'Authorization': 'Bearer ' + '6RUGzsqaYno.bNid_YdeXXgN5T3l0IcD1bcjHhDfDHzVWAH6FcSxysQ', \n          'Content-Type': '\"Content-Type\", \"application/json\"'\n        })\n      });\n      const { token } = await res.json();\n\n      \n      console.log(res)\n      localStorage.setItem(\"token\",token);\n      localStorage.setItem(\"welcome\",false);\n      setToken(token);\n    }\n  }, [setToken, token]);\n\n  const handleMaximizeButtonClick = useCallback(async () => {\n    setLoaded(true);\n    setMinimized(false);\n    setNewMessage(false);\n  }, [setMinimized, setNewMessage]);\n\n  const handleMinimizeButtonClick = useCallback(() => {\n    setMinimized(true);\n    setNewMessage(false);\n  }, [setMinimized, setNewMessage]);\n\n  const handleSwitchButtonClick = useCallback(() => {\n    setSide(side === 'left' ? 'right' : 'left');\n  }, [setSide, side]);\n  const handleLanguageButtonClick = useCallback (()=>{\n    setNewMessage(true)\n  })\n\n  // TODO: [P2] Currently, we cannot unmount Web Chat from DOM when it is minimized.\n  //       Today, if we unmount it, Web Chat will call disconnect on DirectLineJS object.\n  //       When minimized, we still want to maintain that connection while the UI is gone.\n  //       This is related to https://github.com/microsoft/BotFramework-WebChat/issues/2750.\n\n  return (\n    <div className=\"minimizable-web-chat\">\n      {minimized && (\n        <button className=\"maximize\" onClick={handleMaximizeButtonClick}>\n          {newMessage && <span className=\"ms-Icon ms-Icon--CircleShapeSolid red-dot\" />}\n        </button>\n      )}\n      {loaded && (\n        <div className={classNames(side === 'left' ? 'chat-box left' : 'chat-box right', minimized ? 'hide' : '')}>\n          <header>\n            <div className=\"filler\" />\n            <button className=\"switch\" onClick={handleSwitchButtonClick}>\n              <span className=\"ms-Icon ms-Icon--Switch\" />\n            </button>\n            <button className=\"minimize\" onClick={handleMinimizeButtonClick}>\n              <span className=\"ms-Icon ms-Icon--ChromeMinimize\" />\n            </button>\n          </header>\n          <WebChat\n            className=\"react-web-chat\"\n            onFetchToken={handleFetchToken}\n            store={store}\n            styleSet={styleSet}\n            token={token}\n            styleOptions = {styleOptions}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\n\nfunction generateUserId(){\n  return /*\"dl_\" +*/ Date.now().toString() + (Math.floor(Math.random() * 1000000) + 1).toString();\n}\nexport default MinimizableWebChat;\n","import React from 'react';\n\nimport MinimizableWebChat from './MinimizableWebChat';\nimport WebPageBackground from './bg.PNG';\nimport './App.css';\n\n\n\nconst App = () => (\n  <div className=\"App\">\n    <img alt=\"product background\" src={WebPageBackground} />\n    { <MinimizableWebChat /> }\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n","module.exports = __webpack_public_path__ + \"static/media/bg.b0d36d4d.PNG\";"],"sourceRoot":""}